AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy a backend server on EC2 with improved user data script'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type

  GitHubRepo:
    Description: GitHub repository URL to clone
    Type: String
    Default: 'https://github.com/username/repository.git'
    # Replace with your actual repository before deploying

Resources:
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and web application ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  BackendServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref BackendSecurityGroup
      ImageId: ami-0261755bbcb8c4a84  # Ubuntu 22.04 LTS in us-east-1
      Tags:
        - Key: Name
          Value: backend-server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Enable detailed logging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "Starting user data script execution"
          
          # Detect Linux distribution and use appropriate package manager
          if [ -f /etc/debian_release ] || [ -f /etc/lsb-release ]; then
            echo "Debian/Ubuntu detected, using apt"
            # Update system
            apt-get update -y || echo "apt-get update failed"
            apt-get install -y git nodejs npm || echo "Failed to install dependencies with apt"
          elif [ -f /etc/redhat-release ]; then
            echo "RHEL/CentOS/Amazon Linux detected, using yum"
            # For Amazon Linux, RHEL, CentOS
            yum update -y || echo "yum update failed"
            curl -sL https://rpm.nodesource.com/setup_16.x | bash - || echo "NodeSource setup failed"
            yum install -y git nodejs || echo "Failed to install dependencies with yum"
          elif [ -f /etc/amazon-linux-release ]; then
            echo "Amazon Linux 2 detected"
            yum update -y || echo "yum update failed"
            curl -sL https://rpm.nodesource.com/setup_16.x | bash - || echo "NodeSource setup failed"
            yum install -y git nodejs || echo "Failed to install dependencies with yum"
          else
            echo "Unknown Linux distribution"
            exit 1
          fi
          
          echo "Dependencies installed, cloning repository"
          
          # Clone repository
          mkdir -p /app
          cd /app
          
          echo "Cloning from: ${GitHubRepo}"
          git clone ${GitHubRepo} . || {
            echo "Git clone failed with status $?"
            echo "Trying with --depth 1 option"
            git clone --depth 1 ${GitHubRepo} . || {
              echo "Git clone with --depth 1 failed with status $?"
              exit 1
            }
          }
          
          echo "Repository cloned, installing dependencies"
          
          # List directory contents to verify clone
          ls -la
          
          # Install dependencies
          npm install || echo "npm install failed with status $?"
          
          # Check if build script exists in package.json
          if grep -q "\"build\":" package.json; then
            echo "Running build script"
            npm run build || echo "npm build failed with status $?"
          else
            echo "No build script found in package.json, skipping"
          fi
          
          echo "Installing PM2"
          
          # Install PM2 globally
          npm install -g pm2 || echo "PM2 installation failed with status $?"
          
          # Determine start script
          START_SCRIPT="start"
          if grep -q "\"dev\":" package.json; then
            START_SCRIPT="dev"
          fi
          
          echo "Starting application with PM2 using '${START_SCRIPT}' script"
          
          # Start the application with PM2
          pm2 start npm --name "backend" -- run ${START_SCRIPT} || echo "Failed to start app with PM2, status $?"
          pm2 save || echo "PM2 save failed with status $?"
          pm2 startup || echo "PM2 startup failed with status $?"
          
          echo "User data script execution completed"

Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref BackendServer
  
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt BackendServer.PublicIp
  
  PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt BackendServer.PublicDnsName