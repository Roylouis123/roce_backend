Resources:
  # User Pool with SMS verification
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:service}-user-pool-${self:provider.stage}
      UsernameAttributes:
        - phone_number
      AutoVerifiedAttributes:
        - phone_number
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: true
      SmsConfiguration:
        SnsCallerArn: ${ssm:/${self:service}/${self:provider.stage}/sns-role-arn}
        ExternalId: ${self:service}-external-id-${self:provider.stage}
      MfaConfiguration: OFF
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
      VerificationMessageTemplate:
        SmsMessage: "Your verification code is {####}."
        DefaultEmailOption: CONFIRM_WITH_CODE
      SmsVerificationMessage: "Your verification code is {####}."
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          SMSMessage: "Your username is {username} and temporary password is {####}."

  # User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:service}-client-${self:provider.stage}
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      AccessTokenValidity: 5
      IdTokenValidity: 5
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED

  # Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ${self:service}-identity-pool-${self:provider.stage}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  # Identity Pool Role Attachment
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: ${ssm:/${self:service}/${self:provider.stage}/auth-role-arn}
      RoleMappings:
        !Sub "cognito-idp.${aws:region}.amazonaws.com/${CognitoUserPool}:!Ref CognitoUserPoolClient":
          Type: Token
          AmbiguousRoleResolution: AuthenticatedRole

Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolId
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolClientId
  IdentityPoolId:
    Value: !Ref CognitoIdentityPool
    Export:
      Name: ${self:service}-${self:provider.stage}-IdentityPoolId