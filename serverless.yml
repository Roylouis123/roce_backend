service: auth-service-aayu

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if no stage is specified
  region: ${self:custom.stages.${self:provider.stage}.region}
  environment:
    COGNITO_USER_POOL_ID: ${ssm:/dev/cognito/userpool/id~true}
    COGNITO_CLIENT_ID: ${ssm:/dev/cognito/client/id~true}
custom:
  stages:
    dev:
      region: us-east-1
      profile: devProfile
    test:
      region: us-east-1
      profile: testProfile
    prod:
      region: us-west-1
      profile: prodProfile

layers:
  CommonLayer:
    path: layers

package:
  individually: true
  exclude:
    - layers/nodejs/node_modules/**
    - resources/**
    - cloudFormation/**
    - lambda/**
    - ui/**
    - .github/**
    - scripts/**
    - index.js
    - lambda.yml
    - package.json
    - README.md
    - serverless.yml

functions:
  - ${file(resources/lambda.yml)}

resources:
  - ${file(resources/cognito.yml)}
  - ${file(resources/iam_role.yml)}
  - Resources:
      ApiAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
          Name: CognitoAuthorizer
          Type: COGNITO_USER_POOLS
          IdentitySource: method.request.header.Authorization
          RestApiId: !Ref ApiGatewayRestApi
          ProviderARNs:
            - !GetAtt CognitoUserPool.Arn

      ApiGatewayRestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
          Name: ${self:service}-api-${self:provider.stage}
  - Outputs:
      UserPoolId:
        Value: !Ref CognitoUserPool
        Export:
          Name: ${self:service}-UserPoolId-${self:provider.stage}
      UserPoolClientId:
        Value: !Ref CognitoUserPoolClient
        Export:
          Name: ${self:service}-UserPoolClientId-${self:provider.stage}
      ApiUrl:
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
        Export:
          Name: ${self:service}-ApiUrl-${self:provider.stage}
